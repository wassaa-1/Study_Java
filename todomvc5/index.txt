step04 한계점
조회, 등록 등의 내용이 App.java 내부에서 한 번에 이루어지고 있기 때문에 별도의 View, Controller로 분리 필요

MVC(Model, View, Controller) - 전통적인 웹 애플리케이션 개발에서 활용되는 역할 별로 코드(클래스) 분리 패턴
모델: 데이터(Todo.java)와 비즈니스 로직(할일 번호로 Todo 데이터 조회)을 관리합니다.
-> 비즈니스 로직: 음식점으로 비유하면 재료 소스(영업 비밀, 레시피), 경쟁사와는 차별되는 핵심 코드, or 도메인 로직
뷰: 레이아웃과 화면을 처리합니다.
컨트롤러: 명령을 모델과 뷰 부분으로 라우팅합니다.
Controller: 사용자 - 애플리케이션 사이에서 사용자의 명령(요청, Request)에 따라 어떤 코드(로직)를 수행할지 분기시켜주는 역할
ex) 건물 내 프론트 직원

ref. https://developer.mozilla.org/ko/docs/Glossary/MVC

stpe05
1. 관심사의 분리1: 등록, 조회 등 별도의 로직 처리를 담당하는 클래스 및 패키지 service 생성
2. 관심사의 분리2: 결과 출력만을 담당하는 별도의 클래스 및 패키지 view 생성
3. 관심사의 분리3: 등록 조회 등 사용자의 요청에 따라 
어떤 액션을 수행할지 분기(Controlling), 결정을 담당하여 처리하는 별도의 클래스 및 패키지 controller 생성

